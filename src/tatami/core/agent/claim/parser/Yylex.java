/*******************************************************************************
 * Copyright (C) 2013 Andrei Olaru, Marius-Tudor Benea, Nguyen Thi Thuy Nga, Amal El Fallah Seghrouchni, Cedric Herpson.
 * 
 * This file is part of tATAmI-PC.
 * 
 * tATAmI-PC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
 * 
 * tATAmI-PC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License along with tATAmI-PC.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
/* The following code was generated by JFlex 1.4.3 on 10/07/12 17:15 */

/* Lexer specification to be used with jflex, in order to generate the lexical analyzer of Claim2.
To generate the Lexer, in Linux, run the script "generateLexer.sh", included in the directory */
package tatami.core.agent.claim.parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/07/12 17:15 from the specification file
 * <tt>lexer.y</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\7"+
    "\5\0\1\12\1\12\1\5\4\0\1\4\12\6\5\0\1\11\1\0"+
    "\1\42\5\6\1\41\3\6\1\37\17\6\1\0\1\10\2\0\1\6"+
    "\1\0\1\20\1\27\1\25\1\35\1\22\1\34\1\26\1\14\1\15"+
    "\2\6\1\32\1\36\1\23\1\31\1\17\1\6\1\21\1\16\1\13"+
    "\1\24\1\30\1\40\1\6\1\33\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\20\1\1\0"+
    "\1\5\1\1\1\6\1\0\2\1\1\7\1\10\27\1"+
    "\1\0\1\1\1\0\1\1\1\5\1\0\1\11\24\1"+
    "\1\12\4\1\1\13\7\1\1\0\1\2\1\14\1\15"+
    "\4\1\1\16\5\1\1\17\1\1\1\20\5\1\1\21"+
    "\3\1\1\22\6\1\1\23\1\2\2\1\1\24\3\1"+
    "\1\25\2\1\1\26\1\27\1\1\1\30\11\1\1\31"+
    "\1\32\1\33\1\1\1\34\1\35\1\1\1\36\5\1"+
    "\1\37\1\1\1\40\3\1\1\41\1\1\1\42\1\1"+
    "\1\43\1\44\2\1\1\45\1\1\1\46\1\1\1\47"+
    "\1\1\1\50\1\51\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\151"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\257\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7"+
    "\0\43\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604"+
    "\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c"+
    "\0\u073f\0\u0762\0\u0785\0\u07a8\0\u0325\0\u07cb\0\u038e\0\u07ee"+
    "\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906"+
    "\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e"+
    "\0\u0a41\0\u0a64\0\u0a87\0\43\0\u0aaa\0\u0acd\0\u0af0\0\u0b13"+
    "\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b"+
    "\0\u0c4e\0\u0762\0\43\0\43\0\u0c71\0\u0c94\0\u0cb7\0\u0cda"+
    "\0\43\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\43\0\u0dac"+
    "\0\43\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\43\0\u0e7e"+
    "\0\u0ea1\0\u0ec4\0\43\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73"+
    "\0\u0f96\0\43\0\43\0\u0fb9\0\u0fdc\0\43\0\u0fff\0\u1022"+
    "\0\u1045\0\43\0\u1068\0\u108b\0\43\0\43\0\u10ae\0\43"+
    "\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6"+
    "\0\u11e9\0\43\0\43\0\43\0\u120c\0\43\0\43\0\u122f"+
    "\0\43\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de\0\43\0\u1301"+
    "\0\43\0\u1324\0\u1347\0\u136a\0\43\0\u138d\0\43\0\u13b0"+
    "\0\43\0\43\0\u13d3\0\u13f6\0\43\0\u1419\0\43\0\u143c"+
    "\0\43\0\u145f\0\43\0\43\0\43\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\2\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\2\1\21\1\2\1\22\1\2\1\23"+
    "\2\2\1\24\1\2\1\25\1\2\1\26\3\2\3\0"+
    "\5\2\2\0\30\2\2\0\1\4\103\0\1\2\3\0"+
    "\1\27\1\30\3\2\2\0\30\2\1\6\3\31\3\6"+
    "\1\32\1\33\2\31\30\6\6\0\1\34\2\0\1\35"+
    "\1\0\30\34\1\2\3\0\5\2\2\0\1\2\1\36"+
    "\3\2\1\37\23\2\3\0\5\2\2\0\10\2\1\40"+
    "\10\2\1\41\7\2\3\0\5\2\2\0\1\42\6\2"+
    "\1\43\21\2\3\0\5\2\2\0\5\2\1\44\1\45"+
    "\17\2\1\46\2\2\3\0\5\2\2\0\12\2\1\47"+
    "\1\50\6\2\1\51\3\2\1\52\2\2\3\0\5\2"+
    "\2\0\7\2\1\53\21\2\3\0\5\2\2\0\17\2"+
    "\1\54\11\2\3\0\5\2\2\0\7\2\1\55\21\2"+
    "\3\0\5\2\2\0\16\2\1\56\1\2\1\57\10\2"+
    "\3\0\5\2\2\0\7\2\1\60\21\2\3\0\5\2"+
    "\2\0\4\2\1\61\4\2\1\62\17\2\3\0\5\2"+
    "\2\0\16\2\1\63\12\2\3\0\5\2\2\0\5\2"+
    "\1\64\1\2\1\65\16\2\1\66\2\2\3\0\5\2"+
    "\2\0\1\2\1\67\3\2\1\70\22\2\1\27\1\3"+
    "\1\4\1\71\5\27\2\71\30\27\1\72\3\73\1\72"+
    "\1\74\3\72\2\73\30\72\7\31\1\75\1\76\32\31"+
    "\1\6\1\31\1\0\1\31\5\6\2\31\30\6\6\0"+
    "\1\34\4\0\30\34\6\0\1\77\4\0\30\77\1\2"+
    "\3\0\5\2\2\0\2\2\1\100\4\2\1\101\21\2"+
    "\3\0\5\2\2\0\6\2\1\102\22\2\3\0\5\2"+
    "\2\0\2\2\1\103\1\2\1\104\24\2\3\0\5\2"+
    "\2\0\6\2\1\105\22\2\3\0\5\2\2\0\10\2"+
    "\1\106\20\2\3\0\5\2\2\0\6\2\1\107\22\2"+
    "\3\0\5\2\2\0\16\2\1\110\12\2\3\0\5\2"+
    "\2\0\16\2\1\111\12\2\3\0\5\2\2\0\1\112"+
    "\1\113\1\114\26\2\3\0\5\2\2\0\7\2\1\115"+
    "\21\2\3\0\5\2\2\0\22\2\1\116\6\2\3\0"+
    "\5\2\2\0\16\2\1\117\12\2\3\0\5\2\2\0"+
    "\5\2\1\120\4\2\1\121\10\2\1\122\5\2\3\0"+
    "\5\2\2\0\3\2\1\123\25\2\3\0\5\2\2\0"+
    "\25\2\1\124\3\2\3\0\5\2\2\0\10\2\1\125"+
    "\20\2\3\0\5\2\2\0\12\2\1\126\16\2\3\0"+
    "\5\2\2\0\1\2\1\127\27\2\3\0\5\2\2\0"+
    "\7\2\1\130\21\2\3\0\5\2\2\0\1\131\30\2"+
    "\3\0\5\2\2\0\6\2\1\132\22\2\3\0\5\2"+
    "\2\0\2\2\1\133\26\2\3\0\5\2\2\0\3\2"+
    "\1\134\25\2\3\0\5\2\2\0\16\2\1\135\12\2"+
    "\3\0\5\2\2\0\2\2\1\136\26\2\3\0\5\2"+
    "\2\0\2\2\1\137\25\2\1\71\1\3\1\4\40\71"+
    "\1\72\3\73\1\72\1\140\3\72\2\73\30\72\5\73"+
    "\1\141\35\73\1\72\3\73\1\142\1\140\3\72\2\73"+
    "\30\72\2\31\1\0\40\31\1\2\3\0\5\2\2\0"+
    "\3\2\1\143\25\2\3\0\5\2\2\0\10\2\1\144"+
    "\20\2\3\0\5\2\2\0\13\2\1\145\15\2\3\0"+
    "\5\2\2\0\1\146\30\2\3\0\5\2\2\0\11\2"+
    "\1\147\17\2\3\0\5\2\2\0\11\2\1\150\17\2"+
    "\3\0\5\2\2\0\22\2\1\151\6\2\3\0\5\2"+
    "\2\0\7\2\1\152\21\2\3\0\5\2\2\0\5\2"+
    "\1\153\23\2\3\0\5\2\2\0\5\2\1\154\23\2"+
    "\3\0\5\2\2\0\2\2\1\155\26\2\3\0\5\2"+
    "\2\0\2\2\1\156\26\2\3\0\5\2\2\0\22\2"+
    "\1\157\6\2\3\0\5\2\2\0\10\2\1\160\20\2"+
    "\3\0\5\2\2\0\24\2\1\161\4\2\3\0\5\2"+
    "\2\0\5\2\1\162\23\2\3\0\5\2\2\0\12\2"+
    "\1\163\7\2\1\164\6\2\3\0\5\2\2\0\7\2"+
    "\1\165\21\2\3\0\5\2\2\0\16\2\1\166\12\2"+
    "\3\0\5\2\2\0\7\2\1\167\21\2\3\0\5\2"+
    "\2\0\22\2\1\170\6\2\3\0\5\2\2\0\17\2"+
    "\1\171\11\2\3\0\5\2\2\0\5\2\1\172\23\2"+
    "\3\0\5\2\2\0\10\2\1\173\20\2\3\0\5\2"+
    "\2\0\4\2\1\174\24\2\3\0\5\2\2\0\27\2"+
    "\1\175\1\2\3\0\5\2\2\0\10\2\1\176\20\2"+
    "\3\0\5\2\2\0\3\2\1\177\25\2\3\0\5\2"+
    "\2\0\5\2\1\200\23\2\3\0\5\2\2\0\17\2"+
    "\1\201\11\2\3\0\5\2\2\0\1\202\27\2\1\72"+
    "\3\73\1\203\1\140\3\72\2\73\30\72\4\73\1\4"+
    "\1\141\35\73\1\2\3\0\5\2\2\0\7\2\1\204"+
    "\21\2\3\0\5\2\2\0\2\2\1\205\26\2\3\0"+
    "\5\2\2\0\1\206\30\2\3\0\5\2\2\0\12\2"+
    "\1\207\16\2\3\0\5\2\2\0\10\2\1\210\20\2"+
    "\3\0\5\2\2\0\12\2\1\211\16\2\3\0\5\2"+
    "\2\0\17\2\1\212\11\2\3\0\5\2\2\0\16\2"+
    "\1\213\12\2\3\0\5\2\2\0\7\2\1\214\21\2"+
    "\3\0\5\2\2\0\1\215\30\2\3\0\5\2\2\0"+
    "\17\2\1\216\11\2\3\0\5\2\2\0\1\217\30\2"+
    "\3\0\5\2\2\0\24\2\1\220\4\2\3\0\5\2"+
    "\2\0\2\2\1\221\26\2\3\0\5\2\2\0\15\2"+
    "\1\222\13\2\3\0\5\2\2\0\2\2\1\223\26\2"+
    "\3\0\5\2\2\0\2\2\1\224\26\2\3\0\5\2"+
    "\2\0\15\2\1\225\13\2\3\0\5\2\2\0\11\2"+
    "\1\226\17\2\3\0\5\2\2\0\17\2\1\227\11\2"+
    "\3\0\5\2\2\0\1\230\30\2\3\0\5\2\2\0"+
    "\5\2\1\231\23\2\3\0\5\2\2\0\17\2\1\232"+
    "\11\2\3\0\5\2\2\0\7\2\1\233\21\2\3\0"+
    "\5\2\2\0\1\234\30\2\3\0\5\2\2\0\5\2"+
    "\1\235\23\2\3\0\5\2\2\0\1\236\30\2\3\0"+
    "\5\2\2\0\1\237\30\2\3\0\5\2\2\0\1\240"+
    "\30\2\3\0\5\2\2\0\10\2\1\241\20\2\3\0"+
    "\5\2\2\0\15\2\1\242\13\2\3\0\5\2\2\0"+
    "\2\2\1\243\26\2\3\0\5\2\2\0\15\2\1\244"+
    "\13\2\3\0\5\2\2\0\7\2\1\245\21\2\3\0"+
    "\5\2\2\0\1\246\30\2\3\0\5\2\2\0\12\2"+
    "\1\247\16\2\3\0\5\2\2\0\2\2\1\250\26\2"+
    "\3\0\5\2\2\0\1\251\30\2\3\0\5\2\2\0"+
    "\17\2\1\252\11\2\3\0\5\2\2\0\5\2\1\253"+
    "\23\2\3\0\5\2\2\0\13\2\1\254\15\2\3\0"+
    "\5\2\2\0\17\2\1\255\11\2\3\0\5\2\2\0"+
    "\2\2\1\256\26\2\3\0\5\2\2\0\7\2\1\257"+
    "\21\2\3\0\5\2\2\0\15\2\1\260\13\2\3\0"+
    "\5\2\2\0\7\2\1\261\21\2\3\0\5\2\2\0"+
    "\24\2\1\262\4\2\3\0\5\2\2\0\2\2\1\263"+
    "\26\2\3\0\5\2\2\0\16\2\1\264\12\2\3\0"+
    "\5\2\2\0\24\2\1\265\4\2\3\0\5\2\2\0"+
    "\2\2\1\266\26\2\3\0\5\2\2\0\7\2\1\267"+
    "\21\2\3\0\5\2\2\0\15\2\1\270\13\2\3\0"+
    "\5\2\2\0\7\2\1\271\21\2\3\0\5\2\2\0"+
    "\16\2\1\272\12\2\3\0\5\2\2\0\6\2\1\273"+
    "\22\2\3\0\5\2\2\0\10\2\1\274\20\2\3\0"+
    "\5\2\2\0\7\2\1\275\21\2\3\0\5\2\2\0"+
    "\10\2\1\276\17\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\3\1\1\11\20\1\1\0\3\1"+
    "\1\0\33\1\1\0\1\1\1\0\2\1\1\0\42\1"+
    "\1\0\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* store a reference to the parser object */
  private ParserClaim2 yyparser;

  /* constructor taking an additional ParserClaim2 object */
  public Yylex(java.io.Reader r, ParserClaim2 yyparser) {
    this(r);
    this.yyparser = yyparser;
  }
  
  public String getPosition()
  {
  	return new String("at line "+(yyline+1)+" and column "+(yycolumn+1));
  }

  public String getLine()
  {
  	return new String("at line "+(yyline+1));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 44: break;
        case 37: 
          { return ParserClaim2.FORALLK;
          }
        case 45: break;
        case 31: 
          { return ParserClaim2.CYCLIC;
          }
        case 46: break;
        case 4: 
          { return (int) yycharat(0);
          }
        case 47: break;
        case 32: 
          { return ParserClaim2.OUTPUT;
          }
        case 48: break;
        case 14: 
          { return ParserClaim2.SEND;
          }
        case 49: break;
        case 23: 
          { return ParserClaim2.AGOAL;
          }
        case 50: break;
        case 33: 
          { return ParserClaim2.INITIAL;
          }
        case 51: break;
        case 38: 
          { return ParserClaim2.MESSAGE;
          }
        case 52: break;
        case 34: 
          { return ParserClaim2.ACHIEVE;
          }
        case 53: break;
        case 7: 
          { return ParserClaim2.IN;
          }
        case 54: break;
        case 28: 
          { return ParserClaim2.STRUCT;
          }
        case 55: break;
        case 41: 
          { return ParserClaim2.MAINTAIN;
          }
        case 56: break;
        case 11: 
          { return ParserClaim2.OUT;
          }
        case 57: break;
        case 5: 
          { return ParserClaim2.STRING_LITERAL;
          }
        case 58: break;
        case 25: 
          { return ParserClaim2.MGOAL;
          }
        case 59: break;
        case 1: 
          { /* yyparser.yylval = new ParserClaim2Val(yytext());*/
				return ParserClaim2.CONSTANT;
          }
        case 60: break;
        case 43: 
          { return ParserClaim2.CONDITION;
          }
        case 61: break;
        case 9: 
          { /* yyparser.yylval = new ParserClaim2Val(yytext().substring(1));*/
				return ParserClaim2.AFFECTABLE_VARIABLE;
          }
        case 62: break;
        case 16: 
          { return ParserClaim2.ADDK;
          }
        case 63: break;
        case 18: 
          { return ParserClaim2.OPEN;
          }
        case 64: break;
        case 27: 
          { return ParserClaim2.TARGET;
          }
        case 65: break;
        case 36: 
          { return ParserClaim2.REMOVEK;
          }
        case 66: break;
        case 42: 
          { return ParserClaim2.PROACTIVE;
          }
        case 67: break;
        case 30: 
          { return ParserClaim2.ACTION;
          }
        case 68: break;
        case 29: 
          { return ParserClaim2.PARENT;
          }
        case 69: break;
        case 24: 
          { return ParserClaim2.READK;
          }
        case 70: break;
        case 35: 
          { return ParserClaim2.RECEIVE;
          }
        case 71: break;
        case 39: 
          { return ParserClaim2.REACTIVE;
          }
        case 72: break;
        case 19: 
          { return ParserClaim2.WAIT;
          }
        case 73: break;
        case 3: 
          { /* ignore bad characters */
          }
        case 74: break;
        case 26: 
          { return ParserClaim2.WHILE;
          }
        case 75: break;
        case 12: 
          { return ParserClaim2.THIS;
          }
        case 76: break;
        case 10: 
          { return ParserClaim2.NEW;
          }
        case 77: break;
        case 15: 
          { return ParserClaim2.ACID;
          }
        case 78: break;
        case 6: 
          { /* yyparser.yylval = new ParserClaim2Val(yytext().substring(1));*/
				return ParserClaim2.VARIABLE;
          }
        case 79: break;
        case 20: 
          { return ParserClaim2.INPUT;
          }
        case 80: break;
        case 13: 
          { return ParserClaim2.THEN;
          }
        case 81: break;
        case 21: 
          { return ParserClaim2.PGOAL;
          }
        case 82: break;
        case 8: 
          { return ParserClaim2.IF;
          }
        case 83: break;
        case 22: 
          { return ParserClaim2.AGENT;
          }
        case 84: break;
        case 17: 
          { return ParserClaim2.ELSE;
          }
        case 85: break;
        case 40: 
          { return ParserClaim2.BEHAVIOR;
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
