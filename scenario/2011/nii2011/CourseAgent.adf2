// to have parentheses highlighting on this file, register this type (*adf2) in Preferences>General>Editors>File Associations to be opened with the Standalone Structured Text Editor


(agent Course ?courseName ?parent
	(behavior
		////////////////////////////// initial
		(initial register
			(send ?parent (struct message managesCourse this ?courseName))
		)
		
//		(initial initConstants  //Not needed anymore
//			(addK (struct knowledge necessaryStudents 2))
//		)

		(reactive registerUser
			(receive assistsUser ?agentName ?userName)
			(addK (struct knowledge userAgent ?userName ?agentName))

			//the students are counted:	// TODO implement with Java functions
			(if (readK (struct knowledge studentsEnrolled ?number))
			then
				(plus ?number 1 ?result)
				(forAllK (struct knowledge studentsEnrolled ?anyValue)
					(removeK (struct knowledge studentsEnrolled ?anyValue))
				)
				(addK (struct knowledge studentsEnrolled ?result))
				
				(forAllK (struct knowledge necessaryStudents ?anyValue)
					(removeK (struct knowledge necessaryStudents ?anyValue))
				)
				(percentOf 100 ?result ?percentResult)
				(addK (struct knowledge necessaryStudents ?percentResult))
			else
				(addK (struct knowledge studentsEnrolled 1))
				(addK (struct knowledge necessaryStudents 1))
			)
		)
		
		(reactive registerProfessor
			(receive assistsProfessor ?agentName ?userName)
			(addK (struct knowledge professorAgent ?userName ?agentName))
		)
		
		(reactive registerFeedback
			(receive feedbackAgent ?agentName)
			(addK (struct knowledge feedbackAgent ?agentName))
		)
		
		
		///////////////////////// scheduling / room change
		(reactive changeRoom
			(receive scheduling ?courseName ?roomName)	// the ?courseName variable is already bound, it is a parameter of the agent; here it will be used for pattern-matching
			(addK (struct knowledge scheduling ?courseName ?roomName))
			(if (readK (struct knowledge roomAgent ?roomName ?roomAgentName))
			then
				(send ?roomAgentName (struct message scheduledCourse ?courseName this))
				(forAllK (struct knowledge userAgent ?userName ?userAgentName)
						(send ?userAgentName (struct message scheduling ?courseName ?roomName ?roomAgentName))
				)
				(in ?roomAgentName)
			else
				(send ?parent (struct message whoManagesRoom this ?roomName))
			)
		)
		
		(reactive changeRoomA
			(receive managesRoom ?roomAgentName ?roomName)
			(condition (readK (struct knowledge scheduling ?courseName ?roomName)))
			(addK (struct knowledge roomAgent ?roomName ?roomAgentName))
			(send ?roomAgentName (struct message scheduledCourse ?courseName this))
			(forAllK (struct knowledge userAgent ?userName ?userAgentName)
					(send ?userAgentName (struct message scheduling ?courseName ?roomName ?roomAgentName))
			)
			(in ?roomAgentName)
		)
		
		////////////////////// activate start course
		(reactive courseStart
			(receive usersInRoom ?userList)	// this may be a Java list
			(count ?userList ?count)
			
			// TODO also make a test for the professor to be in the list
			
			(readK (struct knowledge necessaryStudents ?necessaryStudents))	
			(if (gteq ?count ?necessaryStudents)
			then
				// course can start
				(send this (struct message theCourseCanStart))
			else
				(readK (struct knowledge roomAgent ?roomName ?roomAgentName))
				(send ?roomAgentName (struct message checkUsers))
			)
		)
		
		(reactive courseStarts
			(receive theCourseCanStart)
			(readK (struct knowledge scheduling ?courseName ?roomName))
			(readK (struct knowledge roomAgent ?roomName ?roomAgentName))
			(readK (struct knowledge professorAgent ?professorName ?professorAgentName))
			(send ?roomAgentName (struct message startCourse ?professorAgentName))
		)

		//////////////////// student activity
		(reactive studentsDiscussion
			(receive startStudentActivity)
			
			(forAllK (struct knowledge userAgent ?userName ?userAgentName)
				(random ?randomNumber)	// in [0,1]
				(if (gteq ?randomNumber 0.5)	// fixme gteq is only implemented for integer; change
				then
					(send ?userAgentName (struct message studentSide Pro))
				else
					(send ?userAgentName (struct message studentSide Con))
				)
			)
			
			(readK (struct knowledge scheduling ?courseName ?roomName))
			(readK (struct knowledge roomAgent ?roomName ?roomAgentName))
			(send ?roomAgentName (struct message startStudentActivity))
		)
		
		(reactive studentLocations
			(receive studentLocations ?locationInformation)	// contains screen agent names
			
			(forAllK (struct knowledge userAgent ?userName ?userAgentName)
				(send this (struct message doUserLocation ?locationInformation ?userName ?userAgentName))	// FIXME because unable to rebind variable
			)
		)
		
		(reactive doUserLocation
			(receive doUserLocation ?locationInformation ?userName ?userAgentName)
			(determineLocation ?userName ?locationInformation ?screenAgentName)
			(send ?userAgentName (struct message screenAssigned ?screenAgentName))
		)

		////////////////// course ending
		(reactive courseEnds
			(receive theCourseIsOver (struct knowledge courseOver ?courseName))
			
			(send ?roomAgentName (struct message theCourseIsOver))
//			(saveActivities)
			
			(forAllK (struct knowledge userAgent ?userName ?userAgentName)
				(addK (struct knowledge toGatherFeedback ?userAgentName))
			)
			(send this (struct message gatherFeedback))
		)
		
		(reactive feedback
			(receive gatherFeedback)	// from self or from returned feedback agent
			(if (readK (struct knowledge toGatherFeedback ?userAgentName))
			then
				// there are still students to give feedback
				(removeK (struct knowledge toGatherFeedback ?userAgentName))
				(send ?feedbackAgentName (struct message collectFeedback ?userAgentName))
//			else
//				(cleanKnowledgeBase)
			)
		)
	)
)